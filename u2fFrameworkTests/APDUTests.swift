//
//  APDUTests.swift
//  u2fFramework
//
//  Created by Владислав Лисянский on 17.10.16.
//  Copyright © 2016 Владислав Лисянский. All rights reserved.
//

import XCTest
@testable import u2fFramework
class APDUTests: XCTestCase {
  
  func testApduGeneration() {
    let apduData = APDU(INS: .register, P1: .registerHashID, DATA: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]).getData()
    let controlArray: [UInt8] = [0,0x81,0,0,0,0,40,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    XCTAssertEqual(apduData, Data(bytes: controlArray))
  }
    
  func testParseRegistrationResponse() {
    guard
      let responseArrayhexToUInt8Array()
      else { XCTFail(); return }
    
    do {
      let parsed = try APDU.parseRegistrationResponse(Data(bytes: responseArray))
      guard
        let publicKey =  "04843DC11044915A50B198A26ED9A836E1A0405EDF1C040D7FD27B9242D2A89AF4A29DF078A3350EB7B1D74F646664377BDF7EA07989D3A29D25076634237F2CE9".hexToUInt8Array(),
        let keyHandle = "4E307D46E7E11077CB3218346CCC56540BE727575D99AA16C3DF933D0AD3852C9EEC6726AA647E64ED4DC96F531249E94877C814174A51CB7C675F72FAC34DE6".hexToUInt8Array(),
        let attestationCertificatehexToUInt8Array(),
        let signature = "30440220636F9BCD1463DE6655D1316E4DD3B8E8DE30C846673BCC02F76C2AB84D620149022037FB96E9AF3E9DDECD81C24950538E73D7C6F554BAC29295A49644B39BD91078".hexToUInt8Array()
        else { XCTFail(); return }

      XCTAssertEqual(Data(bytes: publicKey), parsed.publicKey)
      XCTAssertEqual(Data(bytes: keyHandle), parsed.keyHandle)
      XCTAssertEqual(Data(bytes: attestationCertificate), parsed.attestationCertificate)
      XCTAssertEqual(Data(bytes: signature), parsed.signature)
    } catch { XCTFail(); return }
  }
  
  func testParseAuthenticationResponse() {
    guard let responseArray = "01000000043045022100AC5708327BA162EC71AF28D41C19F13135A02462B05C8EC4B98DF5D7D41BA574022027CC9982028A7D2ADF9863898C34FBEEEACF35699FD8B2569F7AFCCE6C6881EC9000".hexToUInt8Array()
      else { XCTFail(); return }
    do {
      let parsed = try APDU.parseAuthenticationResponse(Data(bytes: responseArray))
      guard
        let userPresence = UInt8("01"),
        let counter = UInt32("00000004"),
        let signature = "3045022100AC5708327BA162EC71AF28D41C19F13135A02462B05C8EC4B98DF5D7D41BA574022027CC9982028A7D2ADF9863898C34FBEEEACF35699FD8B2569F7AFCCE6C6881EC".hexToUInt8Array()
        else { XCTFail(); return }
            
      XCTAssertEqual(userPresence, parsed.userPresence)
      XCTAssertEqual(counter, parsed.counter)
      XCTAssertEqual(Data(bytes: signature), parsed.signature)
    } catch { XCTFail(); return }
  }
}
